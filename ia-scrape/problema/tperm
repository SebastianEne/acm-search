<div class="wiki_text_block"><p> </p>

<table style="margin-left:auto;margin-right:auto;" cellspacing="0"><tr><td><strong>Fişierul intrare/ieşire:</strong></td><td>tperm.in, tperm.out</td><td><strong>Sursă</strong></td><td>Romanian Open Contest, TIMUS 2001</td></tr><tr><td><strong>Autor</strong></td><td><a href="/cauta-probleme?tag_id%5B%5D=136">Mugurel Ionut Andreica</a></td><td><a href="http://infoarena.ro/implica-te/extinde-arhiva/"><strong>Adăugată de</strong></a></td><td><span class="tiny-user"><a href="http://infoarena.ro/utilizator/mugurelionut"><img src="/utilizator/mugurelionut?action=download&amp;file=avatar&amp;resize=L16x16" alt="mugurelionut">Mugurel Ionut Andreica</a> <a title="Rating mugurelionut: 884" class="rating-badge-1" href="http://infoarena.ro/utilizator/mugurelionut?action=rating">•</a><span class="username"><a href="http://infoarena.ro/utilizator/mugurelionut">mugurelionut</a></span></span></td></tr><tr><td><strong>Timp execuţie pe test</strong></td><td>0.1 sec</td><td><strong>Limită de memorie</strong></td><td>16384 kbytes</td></tr><tr><td><strong>Scorul tău în arhivă</strong></td><td>N/A</td><td><strong>Dificultate</strong></td><td>N/A</td></tr></table><p style="float: right; margin-right: 1em"><a href="http://infoarena.ro/monitor?task=tperm">Vezi solutiile trimise</a></p>

<h1>TPerm<br></h1>

<p>Trei informaticieni romani au inventat un nou algoritm care genereaza toate cele <var>N!</var> permutari cu <var>N</var> elemente intr-o ordine specifica, pe care au numit-o <strong>ordinea transpozitiilor</strong>. Algoritmul porneste cu permutarea <var>1 2 3 .. N</var>. Apoi alege o pereche de <var>2</var> elemente adiacente (localizate unul langa altul in permutare) si le interschimba. In felul acesta se obtine o permutare noua. Apoi se aplica aceeasi procedura asupra permutarii noi, obtinandu-se o alta permutare s.a.m.d. pana cand au fost generate (exact o data) toate cele <var>N!</var> permutari. Va dati seama ca algoritmul trebuie sa fie destul de destept pentru a genera toate permutarile exact o data (fara repetitii).</p>

<p>Din fericire, dumneavoastra nu va trebui sa inventati un astfel de algoritm. De fapt, vi se dau fisierele <a href="/problema/tperm?action=download&amp;file=perm.pas&amp;safe_only=false">perm.pas</a> si <a href="/problema/tperm?action=download&amp;file=perm.cpp&amp;safe_only=false">perm.cpp</a> , care sunt <var>2</var> implementari ale acestui algoritm, in Pascal si C/C++. Ele citesc numarul intreg <var>N</var> de la intrarea standard si afiseaza in fisierul <var>perm.txt</var> toate cele <var>N!</var> permutari, cate una pe linie, in ordinea in care le genereaza algoritmul.</p>

<p>Ceea ce trebuie sa faceti dumneavoastra este, data fiind o permutare, sa aflati pe ce pozitie se afla aceasta in sirul permutarilor generate de algoritm. Pozitiile sunt numerotate de la <var>1</var> la <var>N!</var>.</p>

<h2>Date de intrare</h2>

<p>Prima linie a fisierului de intrare <var>tperm.in</var> contine numarul intreg <var>N</var>, reprezentand numarul de elemente ale permutarii. A doua linie contine cele <var>N</var> elemente ale permutarii, separate prin cate un spatiu.</p>

<h2>Date de iesire</h2>

<p>In fisierul de iesire <var>tperm.out</var> veti afisa pozitia pe care se afla permutarea in sirul permutarilor generate de algoritm.</p>

<h2>Restrictii</h2>


<ul><li><var>1 ≤ N ≤ 100</var></li>
</ul><h2>Exemplu</h2>

<table class="example" cellspacing="0"><tr><th>tperm.in</th><th>tperm.out</th></tr><tr><td>4 <br>
2 3 1 4<br></td><td>17<br></td></tr></table><h3>Explicatie</h3>

<p>Lansati in executie cele <var>2</var> programe pentru <var>N=4</var> si veti observa ca permutarea <var>2 3 1 4</var> se va afla pe a <var>17</var>-a linie a fisierului <var>perm.txt</var>.</p>

<div class="macroMessage">Trebuie sa te autentifici pentru a trimite solutii. <a href="/login">Click aici</a></div>



<p><a href="http://infoarena.ro/documentatie/tutorial">Cum se trimit solutii?</a></p></div>